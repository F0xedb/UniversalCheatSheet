[
  {
    "name": "Entry point",
    "info": "The location where a c# program starts",
    "content": "static void Main(string[] args){\n    //entry point\n}"
  },
  {
    "name": "Variables",
    "info": "C# primitieve variabelen",
    "content":  "static void Main(string[] args){\n    int i =5; //integer\n    float f= 3.5f;\n    double d = 5.0;\n    char c= 'C';\n    string = \"This is a string\";\n}"
  },
  {
    "name": "Enumerator",
    "info": "An alias for a set of integers used to make states easier on the programmer",
    "content": "static void Main(string[] args)\n{\n    enum Leerlingen\n    {\n        //the numbers represent the integer counterpart\n        Tom, //0\n        Matthias, //1\n        Michiel, //2\n        Jonas, //3\n        Ben = 7, //7\n        Thomas //8\n    }\n\n    //initialize enums\n    Leerlingen BestStudent = Leerlingen.Ben; //used as a normal integer\n\n    BestStudent = Leerlingen.Michiel; //we can change the variable like normal\n\n    if(BestStudent == Leerlingen.Thomas){\n        Console.Writeline(\"Thomas is the best student\");\n    }\n}\n"
  },
  {
    "name": "For Loop",
    "info": "A for loop can be run x amount of times",
    "content": "static void Main(string[] args){\n\n    for(int i=0;i<5;i++){\n        //this gets run 5 times\n        Console.WriteLine( i );\n    }\n}"
  },
  {
    "name": "While",
    "info": "A loop that keeps running until a condition is true",
    "content": "static void Main(string[] args){\n\n    int i = 0;\n    while(i<5){\n        //do logic here\n        //this runs 5 times\n        i++;\n    }\n}"
  },
  {
    "name": "If",
    "info": "A statement for defining logic",
    "content": "static void Main(string[] args){\n\n    if(condition1){\n        //Only runs when condition1 == true\n    }else if (condition2){\n    //only runs when condition1 == false && condition2 == true\n    }else{\n        //runs when every condition is false\n    }\n}"
  },
  {
    "name": "Ternary operator",
    "info": "This operator is a short hand notation of an if statement",
    "content": "int a = 0;\ntrue == false ? a = 1 : a = 2; // a = 2 since true == false is false\n\n//tenary operator is like an if statement\ncondition ? statemen1 : statement2;\n\n//comparible if statement\nif(condition){\n    statement1\n}else{\n    statement2\n}"
  },
  {
    "name": "Logic Operators",
    "info": "used for boolean expressions",
    "content": "<  //smaller than\n>  //greater than\n<=  //smaller than or equal to\n>=  //greater than or equal to\n!=  //not equal to\n==  //same value\nx && y  //and gate between X and Y\nx && y  //and gate between X and Y\nx & y  //and gate between X and Y (bitwise)\nx | y  //and gate between X and Y (bitwise)"
  },
  {
    "name": "Switch",
    "info": "Short hand notation for an if statement (only ==)",
    "content": "static void Main(string[] args){\n\n    switch ('A')\n    {\n        case 'A':\n            Console.WriteLine( \"it's A\" );\n            break;\n        case 'B':\n            Console.WriteLine( \"it's B\" );\n            break;\n        default:\n            Console.WriteLine( \"It's neither A nor B\" );\n            break;\n    }\n}"
  },
  {
    "name": "Methods",
    "info": "Blocks of code which you can repeat",
    "content": "/* Static because we only want one instance of this Method (no objects)*/\nstatic void func(string name){\n    Console.WriteLine( \"your name is \" + name );\n}\n\n/* a and b are passed by value objects would be passed by reference */\nstatic int add(int a, int b){\n    return a + b; //gives this back to the Method caller\n}\n\n\nstatic void Main(string[] args){\n    func(\"tom\"); //prints your name is tom\n\n    add(4,5); // returns 9\n\n    func(add(5,6)); // prints your name is 11\n}"
  },
  {
    "name": "Method return types",
    "info": "What we can return from Methods",
    "content": "void //returns void aka nothing\nint //returns an integer\ndecimal //returns a deciaml number\ndouble //returns a double\nchar //retunrs a characther\nstring //returns a string\nclass //returns a class instance\nstruct //returns a struct instance"
  },
  {
    "name": "Arrays",
    "info": "How to define multiple objects of the same type in one variable",
    "content": "//Declaring static arrays\n\ntype[] name; //where type is the objects type and name is the variable name\n\n//example\nint[] myIntArray;\n\n//static arrays can't be changed during runtime (static size)\ndouble[] money = new double[MAX_ARRAY_SIZE];\n\n//arrays are pointers to the memory location and indexing an array is equal to array pointer + (index * sizeof(object));\n//indexing arrays\nmoney[5] = 10.0; // in index 5 aka the 6th location of the array\n\nchar[] vowels= {‘a’, ‘e’, ‘i’, ‘o’, ‘u’}; //array initializer during declaration\n\n//multi dimensional arrays\ntype [,] arrayname = new type[length1,length2]\n\n//example\nint[,] beer= new int[7,4];\n\n//jagged arrays aka multidimensional arrays with different sizes\ndouble[][] FortniteMap = {\n    new double[] {5.00, 7.53, 125.212},\n    new double[] {5.00, 7.53},\n    new double[] {5.00, 7.53,5.00, 7.53,5.00, 7.53,5.00, 7.53},\n    new double[] {10.00},\n}\n\narrayneme.Length; // this returns the size of an array"
  },
  {
    "name": "multi-dimensional Arrays",
    "info": "Multi-dimensional arrays are arrays that contains multiple arrays as data.",
    "content": "static void Main(string[] args)\n{\n    //normal array\n    int[] points = new int[10]; //generates array\n    \n    // Declare and initialize an array:\n    int[,] theArray = new int[5, 10]; //2 dimensional array ( 5 arrays with each 10 elements)\n    Console.WriteLine($\"The array has {theArray.Rank} dimensions.\"); //return The array has 2 dimensions\n\n    //access the 5th element in the forth array\n    theArray[3, 4] = 4;\n\n    //jagged array\n    int[][] jaggedArray = new int[4][];\n\n    //init second level of arrays\n    jaggedArray[0] = new int[5];\n    jaggedArray[1] = new int[6];\n    jaggedArray[2] = new int[7];\n    jaggedArray[3] = new int[8];\n\n    //access the second element in the first array\n    jaggedArray[0][1] = 77;\n}"
  },
  {
    "name": "Struct",
    "info": "Structures are a way to organize variables that belong together and are created in the stack",
    "content": "public struct CoOrds\n{\n    public int x, y; // public variables\n\n    public CoOrds(int p1, int p2)//struct constructor\n    {\n        x = p1;\n        y = p2;\n    }\n\n    //struct based method\n    public int multiply(int p1, int p2){\n        return p1 + p2;\n    }\n}\n\n\n//create a struct\nCoOrds house = new CoOrds();"
  },
  {
    "name": "Classes",
    "info": "Whereas structs are mainly used for fast (in memory) and small groups of variables. Classes are used to create more complex objects (instances) that are created on the heap.",
    "content": "private class Coords\n{\n    private int x, y; // private variables\n\n    public Coords(int p1, int p2)//class constructor\n    {\n        x = p1;\n        y = p2;\n    }\n\n    //properties\n    //auto property\n    public int Speed { get; set; }\n\n    //full property\n    //private vars are usually denoted by the first letter being lower case\n    private int health;\n\n    //the publicly accessable variables are usually denoted by the first letter being upper case\n    public int Health\n    {\n        get { return health; }\n        set { health = value; } //value is the value passed when Health is altered\n    }\n\n    //class based method\n    public int Multiply(int p1, int p2){\n        return p1 + p2;\n    }\n}\n\n\n//create a class\nCoords house = new Coords(3,2);\n\nhouse.Multiply(10,15); //call its methods\n"
  },
  {
    "name": "Inheritance",
    "info": "Inherits the methods and properties of a parent class",
    "content": "private class test\n{\n    //default constructor\n    public test() : base() // call super constructor\n    {\n\n    }\n\n    //auto property\n    public int Speed { get; set; }\n\n    //full property\n    private int health;\n\n    public int Health\n    {\n        get { return health; }\n        set { health = value; }\n    }\n\n    //methods\n    public void method()\n    {\n\n    }\n\n    public void method2()\n    {\n        Console.WriteLine(\"hello\");\n    }\n}\n\n//inheritance\nprivate class unit : test //see what I did there\n{\n    public static int AmountOfUnits = 0; //static variable declared on class level not instance level\n    public unit() : base() //base calls the super class constructor\n    {\n        AmountOfUnits++; //shared between all objects of type unit \n    }\n\n    public int TestVar { get; set; }\n\n    public void method2()\n    {\n    Console.WriteLine(\"hi\");\n    }\n    \n}\n\n//declaration\nunit unitTest = new unit();\nunitTest.Speed = 5; //we can use properties of the super class\nunitTest.method(); //we can also call the methods of the super class\nunitTest.TestVar = 3; //and call our own variables\nunitTest.method2();//prints out hi"
  },
  {
    "name": "Interface",
    "info": "Make a template for subclasses each subclass must use the template.",
    "content": "//Interfaces are usully prefixed with the kapital I\npublic interface IMustImplement\n{\n    //auto property\n    int Speed { get; set; }\n\n    //full property\n    int Health { get; set; }\n\n    //methods\n    void method();\n    void method2();\n\n}\n\npublic class test : IMustImplement //use the interface\n{\n    //default constructor\n    public test()\n    {\n\n    }\n\n    //auto property\n    public int Speed { get; set; }\n\n    //full property\n    private int health;\n\n    public int Health\n    {\n        get { return health; }\n        set { health = value; }\n    }\n\n    //methods\n    public void method()\n    {\n\n    }\n\n    public void method2()\n    {\n        Console.WriteLine(\"hello\");\n    }\n}"
  }
]
